```console
$ blo-cli 
? 2
The one-person framework for Rust

Usage: blo-cli [OPTIONS] <COMMAND>

Commands:
  start     Start an app
  db        Perform DB operations
  routes    Describe all application endpoints
  task      Run a custom task
  generate  code generation creates a set of files and code templates based on a predefined set of rules
  doctor    Validate and diagnose configurations
  version   Display the app version
  help      Print this message or the help of the given subcommand(s)

Options:
  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]
  -h, --help                       Print help
  -V, --version                    Print version

```

```console 
$ blo-cli db
? 2
Perform DB operations

Usage: blo-cli db [OPTIONS] <COMMAND>

Commands:
  create    Create schema
  migrate   Migrate schema (up)
  reset     Drop all tables, then reapply all migrations
  status    Migration status
  entities  Generate entity .rs files from database schema
  truncate  Truncate data in tables (without dropping)
  help      Print this message or the help of the given subcommand(s)

Options:
  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]
  -h, --help                       Print help
  -V, --version                    Print version

```

```console
$ blo-cli generate
? 2
code generation creates a set of files and code templates based on a predefined set of rules

Usage: blo-cli generate [OPTIONS] <COMMAND>

Commands:
  model       Generates a new model file for defining the data structure of your application, and test file logic
  migration   Generates a new migration file
  scaffold    Generates a CRUD scaffold, model and controller
  controller  Generate a new controller with the given controller name, and test file
  task        Generate a Task based on the given name
  worker      Generate worker
  mailer      Generate mailer
  deployment  Generate a deployment infrastructure
  help        Print this message or the help of the given subcommand(s)

Options:
  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]
  -h, --help                       Print help
  -V, --version                    Print version

```

```console 
$ LOCO_ENV=test blo-cli task
foo                           [test misaligned cli prints]
seed_data                     [Task for seeding data]
user_report                   [output a user report]

```

```console
$ blo-cli routes --environment test
[GET] /_health
[GET] /_ping
[POST] /auth/forgot
[POST] /auth/login
[POST] /auth/register
[POST] /auth/reset
[POST] /auth/verify
[GET] /mysession
[GET] /notes
[POST] /notes
[GET] /notes/:id
[DELETE] /notes/:id
[POST] /notes/:id
[GET] /user/current
[GET] /user/current_api_key

```

```console 
$ blo-cli doctor
âœ… SeaORM CLI is installed
âœ… DB connection: success
âœ… Redis connection: success

```

```console 
$ LOCO_ENV=test blo-cli db reset

```

```console 
$ LOCO_ENV=teste2e blo-cli db migrate
[[..][0m [32m INFO[0m [2mloco_rs::config[0m[2m:[0m loading environment from [3mselected_path[0m[2m=[0m"config/[..].yaml"
[[..][0m [33m WARN[0m [2mloco_rs::boot[0m[2m:[0m migrate:
[[..][0m [32m INFO[0m [2msea_orm_migration::migrator[0m[2m:[0m Applying all pending migrations
[[..][0m [32m INFO[0m [2msea_orm_migration::migrator[0m[2m:[0m No pending migrations

```

```console 
$ LOCO_ENV=teste2e blo-cli db status
[[..][0m [32m INFO[0m [2mloco_rs::config[0m[2m:[0m loading environment from [3mselected_path[0m[2m=[0m"config/[..].yaml"
[[..][0m [33m WARN[0m [2mloco_rs::boot[0m[2m:[0m status:
[[..][0m [32m INFO[0m [2msea_orm_migration::migrator[0m[2m:[0m Checking migration status
[[..][0m [32m INFO[0m [2msea_orm_migration::migrator[0m[2m:[0m Migration 'm20220101_000001_users'... Applied
[[..][0m [32m INFO[0m [2msea_orm_migration::migrator[0m[2m:[0m Migration 'm20231103_114510_notes'... Applied

```
